import os
import shutil
import random
import re

# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
dataset_path = r"C:\Users\User\Desktop\detect_faces\archive\Chips_Thermal_Face_Dataset"
images_path = os.path.join(dataset_path, "images")  # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
labels_path = os.path.join(dataset_path, "labels")  # –ü–∞–ø–∫–∞ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π

# –ü—É—Ç–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
split_paths = {
    "train": {"images": os.path.join(images_path, "train"), "labels": os.path.join(labels_path, "train")},
    "val": {"images": os.path.join(images_path, "val"), "labels": os.path.join(labels_path, "val")},
    "test": {"images": os.path.join(images_path, "test"), "labels": os.path.join(labels_path, "test")},
}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for split in split_paths.values():
    os.makedirs(split["images"], exist_ok=True)
    os.makedirs(split["labels"], exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–µ–¥ _)
def get_class(filename):
    match = re.match(r"(\d+)_", filename)
    return match.group(1) if match else None

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
class_files = {}
image_files = [f for f in os.listdir(images_path) if f.endswith(".jpeg")]

for file in image_files:
    class_id = get_class(file)
    if class_id:
        if class_id not in class_files:
            class_files[class_id] = []
        class_files[class_id].append(file)

# –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
for class_id, files in class_files.items():
    random.shuffle(files)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞

    # –î–æ–ª–∏ –¥–ª—è train/val/test
    train_ratio = 0.7
    val_ratio = 0.1
    test_ratio = 0.2

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    total_files = len(files)
    train_count = int(total_files * train_ratio)
    val_count = int(total_files * val_ratio)
    test_count = total_files - train_count - val_count  # –û—Å—Ç–∞—Ç–æ–∫ –≤ test

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
    splits = {
        "train": files[:train_count],
        "val": files[train_count:train_count + val_count],
        "test": files[train_count + val_count:]
    }

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏
    for split, split_files in splits.items():
        for file in split_files:
            img_src = os.path.join(images_path, file)
            lbl_src = os.path.join(labels_path, file.replace(".jpg", ".txt"))

            img_dst = os.path.join(split_paths[split]["images"], file)
            lbl_dst = os.path.join(split_paths[split]["labels"], file.replace(".jpg", ".txt"))

            shutil.move(img_src, img_dst)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if os.path.exists(lbl_src):  # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –µ—Å—Ç—å, —Ç–æ–∂–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º
                shutil.move(lbl_src, lbl_dst)

    print(f"‚úÖ –ö–ª–∞—Å—Å {class_id}: Train: {train_count}, Val: {val_count}, Test: {test_count}")

print("üöÄ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
