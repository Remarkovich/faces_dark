import os
import cv2
import asyncio
import logging
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.request import HTTPXRequest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏ –∫–æ–º–∞–Ω–¥
import video_handler
from commands import start, help_command, about, train, cancel
import train_model


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = ''

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
request = HTTPXRequest(connect_timeout=10, read_timeout=60)
app = ApplicationBuilder().token(TOKEN).request(request).build()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    user = message.from_user
    user_id = user.id
    username = user.username or str(user_id)

    video_file = message.video or (
        message.document if message.document and message.document.mime_type == 'video/mp4' else None
    )
    if not video_file:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ
    file_obj = await video_file.get_file()
    video_bytes = await file_obj.download_as_bytearray()
    video_path = video_handler.save_video(video_bytes, user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ user_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data['video_path'] = video_path
    context.user_data['username'] = username

    await message.reply_text(
        "‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /bd, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –∏ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –∫–∞–¥—Ä—ã."
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /bd: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
async def bd_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = context.user_data
    video_path = user_data.get('video_path')
    username = user_data.get('username')

    if not video_path or not os.path.exists(video_path):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ /bd –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        )
        return

    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–±–∏–≤–∫—É –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–¥—Ä—ã...")
    frame_count = video_handler.process_video_to_frames(video_path, username)
    await update.message.reply_text(
        f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∏–¥–µ–æ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {frame_count} –∫–∞–¥—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–ø–∫–µ dataset/{username}."
    )

    # –¥–æ–ø—É—Å—Ç–∏–º, –ø–æ—Å–ª–µ process_video_to_frames(...)
    await update.message.reply_text("üîÑ –†–∞–∑–±–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞—é –¥–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏‚Ä¶")

    # dataset_dir –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–∞–ø–∫—É, –≥–¥–µ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∫–∞–¥—Ä—ã:
    dataset_dir = os.path.abspath(f"output_frames")

    try:
        metrics = train_model.train_model(dataset_dir)
        await update.message.reply_text(
            f"üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n{metrics}"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("about", about))
app.add_handler(CommandHandler("train", train))
app.add_handler(CommandHandler("cancel", cancel))
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è /bd –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º
app.add_handler(CommandHandler("bd", bd_command))

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ –¥–æ –∫–æ–º–∞–Ω–¥—ã /bd
video_filter = (
    filters.VIDEO
    | (
        filters.Document.FileExtension("mp4")
        & filters.Document.MimeType("video/mp4")
    )
)
app.add_handler(MessageHandler(video_filter, handle_video))

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é
async def setup_commands() -> None:
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("about", "–û –±–æ—Ç–µ"),
        BotCommand("bd", "–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É"),
        BotCommand("train", "–î–æ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"),
    ])

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main() -> None:
    await app.initialize()
    try:
        await setup_commands()
        logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")

    await app.start()
    await app.updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    # –û–∂–∏–¥–∞–µ–º Ctrl+C
    stop_event = asyncio.Event()
    try:
        await stop_event.wait()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    await app.updater.stop_polling()
    await app.stop()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
