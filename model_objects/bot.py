import os
import cv2
import logging
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from thermal_processor import ThermalProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ThermalBot:
    def __init__(self, token: str):
        self.token = token
        self.processor = ThermalProcessor()
        self.commands = [
            ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            ("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            ("analyze", "–ê–Ω–∞–ª–∏–∑ —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"),
            ("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏"),
            ("feedback", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
        ]
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–æ–º–∞–Ω–¥"""
        commands_list = "\n".join([f"/{cmd} - {desc}" for cmd, desc in self.commands])
        
        welcome_text = (
            "üî≠ *–¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä* üîç\n\n"
            "–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä–∞ –∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å:\n"
            "‚Ä¢ –õ—é–¥–µ–π üë§\n‚Ä¢ –ñ–∏–≤–æ—Ç–Ω—ã—Ö üêæ\n‚Ä¢ –¢–µ—Ö–Ω–∏–∫—É üöó\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            f"{commands_list}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /analyze –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ."
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode="Markdown",
            reply_markup=self._create_keyboard()
        )
    
    def _create_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç ReplyKeyboardMarkup —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        from telegram import ReplyKeyboardMarkup
        keyboard = [
            ["/analyze", "/help"],
            ["/settings", "/feedback"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
        help_text = (
            "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
            "*/start* - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
            "*/analyze* - –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Å —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä–∞\n"
            "   _–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:_\n"
            "   - –í–∏–¥–µ–æ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏\n"
            "   - –û—Ç—á–µ—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤\n"
            "*/settings* - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏\n"
            "   - –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ—Ç–µ–∫—Ü–∏–∏\n"
            "*/feedback* - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ /analyze!"
        )
        await update.message.reply_text(help_text, parse_mode="Markdown")
    
    async def analyze_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        context.user_data['awaiting_video'] = True
        await update.message.reply_text(
            "üìπ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n\n"
            "1. –°–Ω–∏–º–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä–µ (10-60 —Å–µ–∫)\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–±—ã—á–Ω–æ 1-3 –º–∏–Ω—É—Ç—ã)\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚úÖ –í–∏–¥–µ–æ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏\n"
            "‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
            "‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: MP4, MOV, AVI",
            parse_mode="Markdown"
        )
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        if not context.user_data.get('awaiting_video'):
            await update.message.reply_text(
                "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analyze",
                reply_markup=self._create_keyboard()
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        video_file = update.message.video or update.message.document
        if not video_file:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
                reply_markup=self._create_keyboard()
            )
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_dir = "temp"
        os.makedirs(temp_dir, exist_ok=True)
        user_id = update.message.from_user.id
        input_path = os.path.join(temp_dir, f"thermal_{user_id}_input.mp4")
        output_path = os.path.join(temp_dir, f"thermal_{user_id}_output.mp4")
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await video_file.get_file()
        await file.download_to_drive(input_path)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text(
            "üîç *–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç*\n\n"
            "–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
            "1. –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...\n"
            "2. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏...\n"
            "3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...\n\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç 1-3 –º–∏–Ω—É—Ç—ã ‚è≥",
            parse_mode="Markdown"
        )
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
            processed_path = await self.processor.process_and_visualize_video(input_path, output_path)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ FPS –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            cap = cv2.VideoCapture(input_path)
            fps = cap.get(cv2.CAP_PROP_FPS)
            cap.release()
            
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            detections = await self.processor.process_video(input_path)
            objects = self.processor.analyze_detections(detections, fps)
            report = self.processor.generate_report(objects, fps)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with open(processed_path, 'rb') as video_file:
                await update.message.reply_video(
                    video=video_file,
                    caption=f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞*\n\n{report}",
                    parse_mode="Markdown",
                    supports_streaming=True,
                    reply_markup=self._create_keyboard()
                )
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=processing_msg.message_id
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ 1 –º–∏–Ω—É—Ç—ã\n"
                "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç (MP4 –ª—É—á—à–µ –≤—Å–µ–≥–æ)\n"
                "3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\n"
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                f"`{str(e)[:200]}`",
                parse_mode="Markdown",
                reply_markup=self._create_keyboard()
            )
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for path in [input_path, output_path]:
                if os.path.exists(path):
                    os.remove(path)
            context.user_data.pop('awaiting_video', None)
    
    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        current_settings = (
            "‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            f"–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {self.processor.MIN_CONFIDENCE}\n"
            f"–ú–∏–Ω. –≤—Ä–µ–º—è –¥–µ—Ç–µ–∫—Ü–∏–∏: {self.processor.MIN_DETECTION_TIME} —Å–µ–∫\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/set_confidence 0.7\n"
            "/set_min_time 2.5"
        )
        await update.message.reply_text(
            current_settings,
            parse_mode="Markdown",
            reply_markup=self._create_keyboard()
        )
    
    async def feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        await update.message.reply_text(
            "üí° *–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö. "
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç!",
            parse_mode="Markdown",
            reply_markup=self._create_keyboard()
        )
    
    async def setup_commands(self, application):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [
            BotCommand(cmd, desc) for cmd, desc in self.commands
        ]
        await application.bot.set_my_commands(commands)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        app = ApplicationBuilder().token(self.token).post_init(self.setup_commands).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handlers([
            CommandHandler("start", self.start),
            CommandHandler("help", self.help),
            CommandHandler("analyze", self.analyze_video),
            CommandHandler("settings", self.settings),
            CommandHandler("feedback", self.feedback),
            MessageHandler(
                filters.VIDEO | (filters.Document.MimeType("video/mp4")),
                self.handle_video
            )
        ])
        
        # –ó–∞–ø—É—Å–∫
        app.run_polling()

if __name__ == "__main__":
    bot = ThermalBot("7163110414:AAFN2tf0ATkeh85uzD3S_6dZQEu41j-kEEs")
    bot.run()